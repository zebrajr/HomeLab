{"mappings":"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","sources":["lib/minimap-plugin-generator-element.js"],"sourcesContent":["\"use strict\"\n\nimport { dasherize } from \"./deps/underscore-plus\"\nimport { getHomeDirectory, existsSync } from \"fs-plus\"\nimport path from \"path\"\nimport { BufferedProcess } from \"atom\"\nimport element from \"./decorators/element\"\n\n/** @access private */\nclass MinimapPluginGeneratorElement {\n  static initClass() {\n    this.registerCommands()\n    return element(this, \"minimap-plugin-generator\")\n  }\n\n  static registerCommands() {\n    atom.commands.add(\"minimap-plugin-generator\", {\n      \"core:confirm\"() {\n        this.confirm()\n      },\n      \"core:cancel\"() {\n        this.detach()\n      },\n    })\n  }\n\n  createdCallback() {\n    this.previouslyFocusedElement = null\n    this.mode = null\n\n    this.modal = document.createElement(\"atom-panel\")\n\n    this.modal.classList.add(\"minimap-plugin-generator\")\n    this.modal.classList.add(\"modal\")\n    this.modal.classList.add(\"overlay\")\n    this.modal.classList.add(\"from-top\")\n\n    this.editor = atom.workspace.buildTextEditor({ mini: true })\n    this.editorElement = atom.views.getView(this.editor)\n\n    this.error = document.createElement(\"div\")\n    this.error.classList.add(\"error\")\n\n    this.message = document.createElement(\"div\")\n    this.message.classList.add(\"message\")\n\n    this.modal.appendChild(this.editorElement)\n    this.modal.appendChild(this.error)\n    this.modal.appendChild(this.message)\n\n    this.appendChild(this.modal)\n  }\n\n  attachedCallback() {\n    this.previouslyFocusedElement = document.activeElement\n    this.message.textContent = \"Enter plugin path\"\n    this.setPathText(\"my-minimap-plugin\")\n    this.editorElement.focus()\n  }\n\n  attach() {\n    atom.views.getView(atom.workspace).appendChild(this)\n  }\n\n  setPathText(placeholderName, rangeToSelect) {\n    if (!rangeToSelect) {\n      rangeToSelect = [0, placeholderName.length]\n    }\n\n    const packagesDirectory = getPackagesDirectory()\n\n    this.editor.setText(path.join(packagesDirectory, placeholderName))\n\n    const pathLength = this.editor.getText().length\n    const endOfDirectoryIndex = pathLength - placeholderName.length\n\n    this.editor.setSelectedBufferRange([\n      [0, endOfDirectoryIndex + rangeToSelect[0]],\n      [0, endOfDirectoryIndex + rangeToSelect[1]],\n    ])\n  }\n\n  detach() {\n    if (!this.parentNode) {\n      return\n    }\n\n    if (this.previouslyFocusedElement) {\n      this.previouslyFocusedElement.focus()\n    }\n\n    this.parentNode.removeChild(this)\n  }\n\n  confirm() {\n    if (this.validPackagePath()) {\n      this.removeChild(this.modal)\n      this.message.innerHTML = `\n        <span class='loading loading-spinner-tiny inline-block'></span>\n        Generate plugin at <span class=\"text-primary\">${this.getPackagePath()}</span>\n      `\n\n      this.createPackageFiles(() => {\n        const packagePath = this.getPackagePath()\n        atom.open({ pathsToOpen: [packagePath], devMode: atom.config.get(\"minimap.createPluginInDevMode\") })\n\n        this.message.innerHTML = '<span class=\"text-success\">Plugin successfully generated, opening it now...</span>'\n\n        setTimeout(() => {\n          this.detach()\n        }, 2000)\n      })\n    }\n  }\n\n  getPackagePath() {\n    const packagePath = this.editor.getText()\n    const packageName = dasherize(path.basename(packagePath))\n\n    return path.join(path.dirname(packagePath), packageName)\n  }\n\n  validPackagePath() {\n    if (existsSync(this.getPackagePath())) {\n      this.error.textContent = `Path already exists at '${this.getPackagePath()}'`\n      this.error.style.display = \"block\"\n      return false\n    } else {\n      return true\n    }\n  }\n\n  initPackage(packagePath, callback) {\n    const templatePath = path.resolve(__dirname, path.join(\"..\", \"templates\", `plugin-${this.template}`))\n    runCommand(atom.packages.getApmPath(), [\"init\", \"-p\", `${packagePath}`, \"--template\", templatePath], callback)\n  }\n\n  createPackageFiles(callback) {\n    const packagePath = this.getPackagePath()\n\n    if (isStoredInDotAtom(packagePath)) {\n      this.initPackage(packagePath, () => {\n        installPackage(packagePath, callback)\n      })\n    } else {\n      this.initPackage(packagePath, () => {\n        linkPackage(packagePath, () => {\n          installPackage(packagePath, callback)\n        })\n      })\n    }\n  }\n}\n\nconst minimapPluginGeneratorElement = MinimapPluginGeneratorElement.initClass()\nexport default minimapPluginGeneratorElement\n\nfunction linkPackage(packagePath, callback) {\n  const args = [\"link\"]\n  if (atom.config.get(\"minimap.createPluginInDevMode\")) {\n    args.push(\"--dev\")\n  }\n  args.push(packagePath.toString())\n\n  runCommand(atom.packages.getApmPath(), args, callback)\n}\n\nfunction installPackage(packagePath, callback) {\n  const args = [\"install\"]\n\n  runCommand(atom.packages.getApmPath(), args, callback, { cwd: packagePath })\n}\n\nfunction getPackagesDirectory() {\n  return atom.config.get(\"core.projectHome\") || process.env.ATOM_REPOS_HOME || path.join(getHomeDirectory(), \"github\")\n}\n\nfunction isStoredInDotAtom(packagePath) {\n  const packagesPath = path.join(atom.getConfigDirPath(), \"packages\", path.sep)\n  if (packagePath.indexOf(packagesPath) === 0) {\n    return true\n  }\n\n  const devPackagesPath = path.join(atom.getConfigDirPath(), \"dev\", \"packages\", path.sep)\n\n  return packagePath.indexOf(devPackagesPath) === 0\n}\n\nfunction runCommand(command, args, exit, options = {}) {\n  return new BufferedProcess({ command, args, exit, options })\n}\n"],"names":["installPackage","packagePath","callback","runCommand","atom","packages","getApmPath","cwd","command","args","exit","options","_atom","BufferedProcess","_underscorePlus","require","_fsPlus","_path","_element","minimapPluginGeneratorElement","registerCommands","commands","add","confirm","detach","[object Object]","previouslyFocusedElement","mode","modal","document","createElement","classList","editor","workspace","buildTextEditor","mini","editorElement","views","getView","this","error","message","appendChild","activeElement","textContent","setPathText","focus","placeholderName","rangeToSelect","length","packagesDirectory","config","get","process","env","ATOM_REPOS_HOME","_pathDefault","default","join","getHomeDirectory","setText","endOfDirectoryIndex","getText","setSelectedBufferRange","parentNode","removeChild","validPackagePath","innerHTML","getPackagePath","createPackageFiles","open","pathsToOpen","devMode","setTimeout","packageName","dasherize","basename","dirname","existsSync","style","display","templatePath","resolve","__dirname","template","packagesPath","getConfigDirPath","sep","indexOf","devPackagesPath","isStoredInDotAtom","initPackage","push","linkPackage","initClass"],"version":3,"file":"minimap-plugin-generator-element.dd7c0fd8.js.map"}